#-------------------------------------------------------------------------------
# Name:     Ascon permutation
# Purpose:  Generate all contraints in CNF form -->list
#           All CNF consists of three parts: 
#           1. initial state CNF (generete using ascon_optimal_ls.py), 
#           2. sbox and Constraint CNF (using get_allcons_cnf_ascon.py), 
#           3. Objective Function CNF (using PySat,https://pysathq.github.io/) 
# Author:   Anonymous
# Created:  30-11-2022
# Version:  1st
#-------------------------------------------------------------------------------
from sage.all import *
from copy import copy, deepcopy
from sage.rings.polynomial.pbori.pbori import *
from sage.rings.polynomial.pbori import *
from random import randint
from sympy.logic import POSform
from sympy import symbols


######## B_x,y & A_x,y & D_x,y ##############
## 1.  row has 3 bit positions that can be chosen as variable 
##[B_x,y, B_x-r0,y, B_x-r1,y, A_x,y, D_x,y]

# 1+3+2*(c(3,2)+1) =12
CNF_bad = [
    [0, 0, 0, 0, 0], 
    [1, 0, 0, 1, 0], 
    [0, 1, 0, 1, 0], 
    [1, 1, 0, 1, 0], 
    [0, 0, 1, 1, 0], 
    [1, 0, 1, 1, 0], 
    [0, 1, 1, 1, 0], 
    [1, 1, 1, 1, 0],  
    [1, 1, 0, 0, 1], 
    [1, 0, 1, 0, 1], 
    [0, 1, 1, 0, 1], 
    [1, 1, 1, 0, 1]
]

######## A_x,y & B_x,y##############
## 2.  1 only present at the first row         1 means var [A0 A1 A2 A3 A4 B0 B1 B2 B3 B4]    
#      00000 -->00000
#      10000 -->11010 01011 11000 01001         
# 5
Free_start = [
    [0,0,0,0,0,0,0,0,0,0],
    [1,0,0,0,0,1,1,0,1,0],
    [1,0,0,0,0,0,1,0,1,1],
    [1,0,0,0,0,1,1,0,0,0],
    [1,0,0,0,0,0,1,0,0,1]
]


######## A1_x,y & B1_x,y##############
## 3.  00000 -->11111          inputs:1 means linear 0 means constant;  outputs: 1 means linear 0 means quadratic [A0 A1 A2 A3 A4 B0 B1 B2 B3 B4]    
#      10000 01000 00010 00001 -->11111 
#      11000 -->01110
#      10010 -->11101
#      01010 -->10111
#      11010 -->00100
#      10001 -->11101
#      01001 -->01110
#      11001 -->01100
#      00011 -->11011
#      10011 -->11001
#      01011 -->00010
#      11011 -->00000
# 16
A_to_B = [
    [0,0,0,0,0,1,1,1,1,1],
    [1,0,0,0,0,1,1,1,1,1],
    [0,1,0,0,0,1,1,1,1,1],
    [0,0,0,1,0,1,1,1,1,1],
    [0,0,0,0,1,1,1,1,1,1],
    [1,1,0,0,0,0,1,1,1,0],
    [1,0,0,1,0,1,1,1,0,1],
    [0,1,0,1,0,1,0,1,1,1],
    [1,1,0,1,0,0,0,1,0,0],
    [1,0,0,0,1,1,1,1,0,1],
    [0,1,0,0,1,0,1,1,1,0],
    [1,1,0,0,1,0,1,1,0,0],
    [0,0,0,1,1,1,1,0,1,1],
    [1,0,0,1,1,1,1,0,0,1],
    [0,1,0,1,1,0,0,0,1,0],
    [1,1,0,1,1,0,0,0,0,0]  
]

######## B_x,y & A_x,y & Q_x,y ##############
## 4.  row has 3 bit positions that can be chosen as variable 
##[B_x,y, B_x-r0,y, B_x-r1,y, A_x,y, Q_x,y]
# 2+2*6 =14
CNF_baq = [
    [1,1,1,1,0],
    [1,1,0,1,1],
    [1,1,0,0,0],
    [1,0,1,1,1],
    [1,0,1,0,0],
    [1,0,0,1,1],
    [1,0,0,0,0],
    [0,1,1,1,1],
    [0,1,1,0,0],
    [0,1,0,1,1],
    [0,1,0,0,0],
    [0,0,1,1,1],
    [0,0,1,0,0],
    [0,0,0,0,0]
]

######## A_x,y & Hash ##############
## 5. [A0 A1 A2 A3 A4 B0] column: hash B0 bit
#  if a_0 & a_2 & a_3 is linear bit, i.e., value is 1, in this way, we use probabilistic linearization
#  b_0 = a_0 + a_2 + a_3, if a_1(a_0+a_2+a_4+1) = 0
#  32
CNF_Hash_3r_3 = [
    [0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0],
    [1, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0, 0],
    [1, 0, 0, 1, 0, 0],
    [0, 1, 0, 1, 0, 0],
    [1, 1, 0, 1, 0, 0],
    [0, 0, 1, 1, 0, 0],
    [1, 0, 1, 1, 0, 1],
    [0, 1, 1, 1, 0, 0],
    [1, 1, 1, 1, 0, 1],
    [0, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 1, 0],
    [0, 1, 0, 0, 1, 0],
    [1, 1, 0, 0, 1, 0],
    [0, 0, 1, 0, 1, 0],
    [1, 0, 1, 0, 1, 0],
    [0, 1, 1, 0, 1, 0],
    [1, 1, 1, 0, 1, 0],
    [0, 0, 0, 1, 1, 0],
    [1, 0, 0, 1, 1, 0],
    [0, 1, 0, 1, 1, 0],
    [1, 1, 0, 1, 1, 0],
    [0, 0, 1, 1, 1, 0],
    [1, 0, 1, 1, 1, 1],
    [0, 1, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 1]
]


#########################__4rpreimage__####################################
 
## 1. A0_to_B0
## [a0,a1,a2,a3,a4,b0,b1,b2,b3,b4] 
## for a,b:1 means linear, 0 means constant
## 3
CNF_a02b0 = [
    [0,0,0,0,0,0,0,0,0,0],
    [1,0,0,0,0,1,1,0,0,0],
    [1,0,0,0,0,0,1,0,0,1]
]

## 2. B0_to_A1
## [b0,b1,b2,a0,d0] 
## for a,b: 1 means linear, 0 means constant
## 12
CNF_b02a1 = [
    [0, 0, 0, 0, 0], 
    [1, 0, 0, 1, 0], 
    [0, 1, 0, 1, 0], 
    [1, 1, 0, 1, 0], 
    [0, 0, 1, 1, 0], 
    [1, 0, 1, 1, 0], 
    [0, 1, 1, 1, 0], 
    [1, 1, 1, 1, 0],  
    [1, 1, 0, 0, 1], 
    [1, 0, 1, 0, 1], 
    [0, 1, 1, 0, 1], 
    [1, 1, 1, 0, 1]
]

## 3. A1_to_B1 : A1,B1,Qb1
## [a0,a1,a2,a3,a4,b0,q0,b1,q1,b2,q2,b3,q3,b4,q4] 
## for a:1 means linear, 0 means constant for bq: 01 means constant, 11 means linear, 00 means quadratic
## 8
CNF_a12b1=[
    [0,0,0,0,0,0,1,0,1,0,1,0,1,0,1],
    [1,0,0,0,0,1,1,1,1,0,1,0,1,0,1],
    [1,0,0,0,0,0,1,1,1,0,1,0,1,1,1],
    [0,1,0,0,0,0,1,0,1,1,1,1,1,0,1],
    [0,0,0,0,1,0,1,1,1,0,1,0,1,1,1],
    [0,0,0,0,1,1,1,1,1,0,1,0,1,0,1],
    [1,1,0,0,0,0,0,1,1,1,1,1,1,0,0],
    [0,1,0,0,1,0,0,1,1,1,1,1,1,0,0]
]

## 4. B1_to_A2: B1,A2,Qb1, Qa2
## [b0,q0,b1,q1,b2,q2,a0,Q0] 
## for bq,aQ: 01 means constant, 11 means linear, 00 means quadratic
## for Row= 1,2,3
## 8
CNF_b12a2_r3 = [
    [0,1,0,1,0,1,0,1],
    [0,1,0,1,1,1,1,1],
    [0,1,1,1,0,1,1,1],
    [1,1,0,1,0,1,1,1],
    [0,1,1,1,1,1,1,1],
    [1,1,0,1,1,1,1,1],
    [1,1,1,1,0,1,1,1],
    [1,1,1,1,1,1,1,1]
]

## 4. B1_to_A2: B1,A2,Qb1, Qa2
## [b0,q0,b1,q1,b2,q2,a0,Q0]
## for bq,aQ: 01 means constant, 11 means linear, 00 means quadratic
## for Row= 0,4
## 27
CNF_b12a2_r2 = [
    [0,1,0,1,0,1,0,1],
    [0,1,0,1,1,1,1,1],
    [0,1,1,1,0,1,1,1],
    [1,1,0,1,0,1,1,1],
    [0,1,1,1,1,1,1,1],
    [1,1,0,1,1,1,1,1],
    [1,1,1,1,0,1,1,1],
    [1,1,1,1,1,1,1,1],
    [0,0,0,1,0,1,0,0],
    [0,0,0,1,1,1,0,0],
    [0,0,1,1,0,1,0,0],
    [0,0,1,1,1,1,0,0],
    [0,1,0,0,0,1,0,0],
    [0,1,0,0,1,1,0,0],
    [1,1,0,0,0,1,0,0],
    [1,1,0,0,1,1,0,0],
    [0,1,0,1,0,0,0,0],
    [0,1,1,1,0,0,0,0],
    [1,1,0,1,0,0,0,0],
    [1,1,1,1,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,1,0,0],
    [0,0,0,0,1,1,0,0],
    [0,0,0,1,0,0,0,0],
    [0,0,1,1,0,0,0,0],
    [0,1,0,0,0,0,0,0],
    [1,1,0,0,0,0,0,0]

]

## 5. A2_to_B2: A2,B2,Qa2
## [a0,q0,a1,q1,a2,q2,a3,q3,a4,q4,b0,b1,b2,b3,b4]
## for aq: 01 means constant, 11 means linear, 00 means quadratic
## for b: 1 means linear, 0 means quadratic
## 126
CNF_a22b2 = [
    [0,1,0,1,0,1,0,1,0,1,1,1,1,1,1],
    [1,1,0,1,0,1,0,1,0,1,1,1,1,1,1],
    [0,1,1,1,0,1,0,1,0,1,1,1,1,1,1],
    [0,1,0,1,0,1,1,1,0,1,1,1,1,1,1],
    [0,1,0,1,0,1,0,1,1,1,1,1,1,1,1],
    [1,1,1,1,0,1,0,1,0,1,0,1,1,1,0],
    [0,1,1,1,0,1,1,1,0,1,1,0,1,1,1],
    [0,1,1,1,0,1,0,1,1,1,0,1,1,1,0],
    [0,1,0,1,0,1,1,1,1,1,1,1,0,1,1],
    [1,1,0,1,0,1,1,1,0,1,1,1,1,0,1],
    [1,1,0,1,0,1,0,1,1,1,1,1,1,0,1],
    [0,1,1,1,0,1,1,1,1,1,0,0,0,1,0],
    [1,1,0,1,0,1,1,1,1,1,1,1,0,0,1],
    [1,1,1,1,0,1,0,1,1,1,0,1,1,0,0],
    [1,1,1,1,0,1,1,1,0,1,0,0,1,0,0],
    [1,1,1,1,0,1,1,1,1,1,0,0,0,0,0],
    [0,1,0,1,1,1,0,1,0,1,1,1,1,1,1],
    [0,1,0,1,1,1,0,1,1,1,1,1,1,1,1],
    [0,1,0,1,1,1,1,1,0,1,1,0,1,1,1],
    [0,1,0,1,1,1,1,1,1,1,1,0,0,1,1],
    [0,1,1,1,1,1,0,1,0,1,0,0,1,1,1],
    [0,1,1,1,1,1,0,1,1,1,0,0,1,1,0],
    [0,1,1,1,1,1,1,1,0,1,0,0,1,1,1],
    [0,1,1,1,1,1,1,1,1,1,0,0,0,1,0],
    [1,1,0,1,1,1,0,1,0,1,1,1,1,1,1],
    [1,1,0,1,1,1,0,1,1,1,1,1,1,0,1],
    [1,1,0,1,1,1,1,1,0,1,1,0,1,0,1],
    [1,1,0,1,1,1,1,1,1,1,1,0,0,0,1],
    [1,1,1,1,1,1,0,1,0,1,0,0,1,1,0],
    [1,1,1,1,1,1,0,1,1,1,0,0,1,0,0],
    [1,1,1,1,1,1,1,1,0,1,0,0,1,0,0],
    [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
    [0,0,0,1,0,1,0,1,0,1,0,0,1,0,1],
    [0,0,0,1,0,1,0,1,0,1,0,0,1,1,1],
    [0,0,0,1,0,1,0,1,0,1,1,0,1,0,0],
    [0,0,0,1,0,1,0,1,0,1,1,0,1,1,0],
    [0,0,0,1,0,1,0,1,1,1,0,0,1,0,1],
    [0,0,0,1,0,1,0,1,1,1,1,0,1,0,0],
    [0,0,0,1,0,1,1,1,0,1,0,0,1,0,1],
    [0,0,0,1,0,1,1,1,0,1,1,0,1,0,0],
    [0,0,0,1,0,1,1,1,1,1,0,0,0,0,1],
    [0,0,0,1,0,1,1,1,1,1,1,0,0,0,0],
    [0,0,0,1,1,1,0,1,0,1,0,0,1,0,1],
    [0,0,0,1,1,1,0,1,0,1,0,0,1,1,1],
    [0,0,0,1,1,1,0,1,0,1,1,0,1,0,0],
    [0,0,0,1,1,1,0,1,0,1,1,0,1,1,0],
    [0,0,0,1,1,1,0,1,1,1,0,0,1,0,1],
    [0,0,0,1,1,1,0,1,1,1,1,0,1,0,0],
    [0,0,0,1,1,1,1,1,0,1,0,0,1,0,1],
    [0,0,0,1,1,1,1,1,0,1,1,0,1,0,0],
    [0,0,0,1,1,1,1,1,1,1,0,0,0,0,1],
    [0,0,0,1,1,1,1,1,1,1,1,0,0,0,0],
    [0,0,1,1,0,1,0,1,0,1,0,0,1,0,0],
    [0,0,1,1,0,1,0,1,0,1,0,0,1,1,0],
    [0,0,1,1,0,1,0,1,1,1,0,0,1,0,0],
    [0,0,1,1,0,1,1,1,0,1,0,0,1,0,0],
    [0,0,1,1,0,1,1,1,1,1,0,0,0,0,0],
    [0,0,1,1,1,1,0,1,0,1,0,0,1,0,0],
    [0,0,1,1,1,1,0,1,0,1,0,0,1,1,0],
    [0,0,1,1,1,1,0,1,1,1,0,0,1,0,0],
    [0,0,1,1,1,1,1,1,0,1,0,0,1,0,0],
    [0,0,1,1,1,1,1,1,1,1,0,0,0,0,0],
    [0,1,0,1,0,1,0,1,0,0,0,0,0,0,1],
    [0,1,0,1,0,1,0,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,1,0,1,0,0,0,0,1,0,1],
    [0,1,0,1,0,1,0,1,0,0,0,0,1,1,1],
    [0,1,0,1,0,1,0,1,0,0,1,0,0,0,0],
    [0,1,0,1,0,1,0,1,0,0,1,0,0,1,0],
    [0,1,0,1,0,1,0,1,0,0,1,0,1,0,0],
    [0,1,0,1,0,1,0,1,0,0,1,0,1,1,0],
    [0,1,0,1,0,1,1,1,0,0,0,0,0,0,1],
    [0,1,0,1,0,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,0,1,1,1,0,0,1,0,0,0,0],
    [0,1,0,1,0,1,1,1,0,0,1,0,0,1,0],
    [0,1,0,1,1,1,0,1,0,0,0,0,0,0,1],
    [0,1,0,1,1,1,0,1,0,0,0,0,0,1,1],
    [0,1,0,1,1,1,0,1,0,0,0,0,1,0,1],
    [0,1,0,1,1,1,0,1,0,0,0,0,1,1,1],
    [0,1,0,1,1,1,0,1,0,0,1,0,0,0,0],
    [0,1,0,1,1,1,0,1,0,0,1,0,0,1,0],
    [0,1,0,1,1,1,0,1,0,0,1,0,1,0,0],
    [0,1,0,1,1,1,0,1,0,0,1,0,1,1,0],
    [0,1,0,1,1,1,1,1,0,0,0,0,0,0,1],
    [0,1,0,1,1,1,1,1,0,0,0,0,0,1,1],
    [0,1,0,1,1,1,1,1,0,0,1,0,0,0,0],
    [0,1,0,1,1,1,1,1,0,0,1,0,0,1,0],
    [0,1,1,1,0,1,0,1,0,0,0,0,0,0,0],
    [0,1,1,1,0,1,0,1,0,0,0,0,0,1,0],
    [0,1,1,1,0,1,0,1,0,0,0,0,1,0,0],
    [0,1,1,1,0,1,0,1,0,0,0,0,1,1,0],
    [0,1,1,1,0,1,1,1,0,0,0,0,0,0,0],
    [0,1,1,1,0,1,1,1,0,0,0,0,0,1,0],
    [0,1,1,1,1,1,0,1,0,0,0,0,0,0,0],
    [0,1,1,1,1,1,0,1,0,0,0,0,0,1,0],
    [0,1,1,1,1,1,0,1,0,0,0,0,1,0,0],
    [0,1,1,1,1,1,0,1,0,0,0,0,1,1,0],
    [0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
    [0,1,1,1,1,1,1,1,0,0,0,0,0,1,0],
    [1,1,0,1,0,1,0,1,0,0,0,0,0,0,0],
    [1,1,0,1,0,1,0,1,0,0,0,0,0,0,1],
    [1,1,0,1,0,1,0,1,0,0,0,0,1,0,0],
    [1,1,0,1,0,1,0,1,0,0,0,0,1,0,1],
    [1,1,0,1,0,1,1,1,0,0,0,0,0,0,0],
    [1,1,0,1,0,1,1,1,0,0,0,0,0,0,1],
    [1,1,0,1,1,1,0,1,0,0,0,0,0,0,0],
    [1,1,0,1,1,1,0,1,0,0,0,0,0,0,1],
    [1,1,0,1,1,1,0,1,0,0,0,0,1,0,0],
    [1,1,0,1,1,1,0,1,0,0,0,0,1,0,1],
    [1,1,0,1,1,1,1,1,0,0,0,0,0,0,0],
    [1,1,0,1,1,1,1,1,0,0,0,0,0,0,1],
    [1,1,1,1,0,1,0,1,0,0,0,0,0,0,0],
    [1,1,1,1,0,1,0,1,0,0,0,0,1,0,0],
    [1,1,1,1,0,1,1,1,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,0,1,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,0,1,0,0,0,0,1,0,0],
    [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
    [0,0,0,1,0,1,0,1,0,0,0,0,0,0,0],
    [0,0,0,1,0,1,1,1,0,0,0,0,0,0,0],
    [0,0,0,1,1,1,0,1,0,0,0,0,0,0,0],
    [0,0,0,1,1,1,1,1,0,0,0,0,0,0,0],
    [0,0,1,1,0,1,0,1,0,0,0,0,0,0,0],
    [0,0,1,1,0,1,1,1,0,0,0,0,0,0,0],
    [0,0,1,1,1,1,0,1,0,0,0,0,0,0,0],
    [0,0,1,1,1,1,1,1,0,0,0,0,0,0,0]

]

## 6. B2_to_A3: B2,A3
## [b0,b1,b2,a0]
## for a,b: 1 means linear, 0 means quadratic
## 8
CNF_b22a3 = [
    [1,1,1,1],
    [1,1,0,0],
    [1,0,1,0],
    [1,0,0,0],
    [0,1,1,0],
    [0,1,0,0],
    [0,0,1,0],
    [0,0,0,0]
]

## 7. n2: A1,k
## [a0,a1,a2,a3,a4,k0,k1] k0 = 1 means each sbox has 2 constrains; k1 = 1 means each sbox has 3 constrains
## consume dr in the second p_S
## 5
CNF_n2 =[
    [1,0,0,0,0,1,0],
    [0,1,0,0,0,0,1],
    [0,0,0,0,1,0,1],
    [1,1,0,0,0,0,0],
    [0,1,0,0,1,0,0],
    [0,0,0,0,0,0,0]
]

## 8. n3: Q1,B2,k
## [q0,q1,q2,q3,q4,b0,b1,b2,b3,b4,k2,k3,k4]
## consume dr in the third p_S
## 9+12+1+15=37
CNF_n3 =[
    [0,1,1,1,1,0,0,1,0,1,1,0,0],
    [0,1,1,1,1,0,0,1,1,1,1,1,0],
    [0,1,1,1,1,1,0,1,0,0,1,0,0],
    [0,1,1,1,1,1,0,1,1,0,1,1,0],
    [0,1,1,1,1,0,0,0,0,1,1,0,0],
    [0,1,1,1,1,1,0,0,0,0,1,0,0],
    [0,1,1,1,1,0,0,1,0,0,0,0,0],
    [0,1,1,1,1,0,0,1,1,0,1,0,0],
    [0,1,1,1,1,0,0,0,0,0,0,0,0],
    [1,1,1,1,0,0,0,0,0,1,1,0,0],
    [1,1,1,1,0,0,0,0,1,1,1,1,0],
    [1,1,1,1,0,0,0,1,0,1,1,1,0],
    [1,1,1,1,0,0,0,1,1,1,1,1,1],
    [1,1,1,1,0,1,0,0,0,0,1,0,0],
    [1,1,1,1,0,1,0,0,1,0,1,1,0],
    [1,1,1,1,0,1,0,1,0,0,1,1,0],
    [1,1,1,1,0,1,0,1,1,0,1,1,1],
    [1,1,1,1,0,0,0,0,0,0,0,0,0],
    [1,1,1,1,0,0,0,0,1,0,1,0,0],
    [1,1,1,1,0,0,0,1,0,0,1,0,0],
    [1,1,1,1,0,0,0,1,1,0,1,1,0],
    [0,1,1,1,0,0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,0,0,0],
    [1,1,1,1,1,0,1,1,1,0,0,0,0],
    [1,1,1,1,1,1,0,1,1,1,0,0,0],
    [1,1,1,1,1,1,1,0,1,1,0,0,0],
    [1,1,1,1,1,1,1,1,0,1,0,0,0],
    [1,1,1,1,1,1,1,0,0,1,0,0,0],
    [1,1,1,1,1,0,1,1,0,0,0,0,0],
    [1,1,1,1,1,0,0,1,0,0,0,0,0],
    [1,1,1,1,1,0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,0,0,1,1,0,0,0],
    [1,1,1,1,1,0,0,1,1,0,0,0,0],
    [1,1,1,1,1,0,0,1,1,1,0,0,0],
    [1,1,1,1,1,0,0,0,1,0,0,0,0],
    [1,1,1,1,1,1,0,1,0,1,0,0,0],
    [1,1,1,1,1,1,0,0,0,1,0,0,0]

]



if __name__ == '__main__':
    
   
    print("B_start: [b0 b1 b2 b3 b4] ")
    b0, b1, b2, b3, b4 = symbols('b0 b1 b2 b3 b4')
    minterms = B_start
    print(POSform([b0, b1, b2, b3, b4], minterms))
    print("\n")
   
    # print("A_indepent: [A0 A1 A2 A3 A4] ")
    # A0, A1, A2, A3, A4 = symbols('A0 A1 A2 A3 A4')
    # minterms = A_indepent
    # print(POSform([A0, A1, A2, A3, A4], minterms))
    # print("\n")

    # print("CNF_Hash_3r_3: [A0 A1 A2 A3 A4 B0] ")
    # A0, A1, A2, A3, A4, B0 = symbols('A0 A1 A2 A3 A4 B0')
    # minterms = CNF_Hash_3r_3
    # print(POSform([A0, A1, A2, A3, A4, B0], minterms))
    # print("\n")
    
    # print("CNF_baq: [B0 B1 B2 A Q] ")
    # B0, B1, B2, A, Q= symbols('B0 B1 B2 A Q')
    # minterms = CNF_baq
    # print(POSform([B0, B1, B2, A, Q], minterms))
    # print("\n")


    # print("CNF_a02b0: [A0 A1 A2 A3 A4 B0 B1 B2 B3 B4 ]")
    # A0, A1, A2, A3, A4, B0, B1, B2, B3, B4 = symbols('A0 A1 A2 A3 A4 B0 B1 B2 B3 B4')
    # minterms = CNF_a02b0
    # print(POSform([A0, A1, A2, A3, A4, B0, B1, B2, B3, B4], minterms))
    # print("\n")

    # print("CNF_a12b1: [A0 A1 A2 A3 A4 B0 q0 B1 q1 B2 q2 B3 q3 B4 q4 ]")
    # A0, A1, A2, A3, A4, B0, q0, B1, q1, B2, q2, B3, q3, B4, q4 = symbols('A0 A1 A2 A3 A4 B0 q0 B1 q1 B2 q2 B3 q3 B4 q4')
    # minterms = CNF_a12b1
    # print(POSform([A0, A1, A2, A3, A4, B0, q0, B1, q1, B2, q2, B3, q3, B4, q4], minterms))
    # print("\n")

    # print("CNF_b12a2_r3: [B0 p0 B1 p1  B2 p2 A Q] ")
    # B0, p0, B1, p1,  B2, p2, A, Q= symbols('B0 p0 B1 p1  B2 p2 A Q')
    # minterms = CNF_b12a2_r3
    # print(POSform([B0, p0, B1, p1,  B2, p2, A, Q], minterms))
    # print("\n")

    # print("CNF_b12a2_r2: [B0 p0 B1 p1  B2 p2 A Q] ")
    # B0, p0, B1, p1,  B2, p2, A, Q= symbols('B0 p0 B1 p1  B2 p2 A Q')
    # minterms = CNF_b12a2_r2
    # print(POSform([B0, p0, B1, p1,  B2, p2, A, Q], minterms))
    # print("\n")

    # print("CNF_a22b2: [A0 q0 A1 q1 A2 q2 A3 q3 A4 q4 B0  B1  B2  B3  B4 ]")
    # A0, q0, A1, q1, A2, q2, A3, q3, A4, q4, B0,  B1,  B2,  B3,  B4 = symbols('A0 q0 A1 q1 A2 q2 A3 q3 A4 q4 B0  B1  B2  B3  B4')
    # minterms = CNF_a22b2
    # print(POSform([A0, q0, A1, q1, A2, q2, A3, q3, A4, q4, B0,  B1,  B2,  B3,  B4], minterms))
    # print("\n")

    # print("CNF_b22a3: [B0 B1 B2 A] ")
    # B0, B1, B2, A= symbols('B0 B1 B2 A')
    # minterms = CNF_b22a3
    # print(POSform([B0, B1, B2, A], minterms))
    # print("\n")

    # print("CNF_n2: [a0 a1 a2 a3 a4 k0 k1] ")
    # a0, a1, a2, a3, a4, k0, k1= symbols('a0 a1 a2 a3 a4 k0 k1')
    # minterms = CNF_n2
    # print(POSform([a0, a1, a2, a3, a4, k0, k1], minterms))
    # print("\n")

    # print("CNF_n3: [q0 q1 q2 q3 q4 b0 b1 b2 b3 b4 k2 k3 k4]")
    # q0, q1, q2, q3, q4, b0, b1, b2, b3, b4, k2, k3, k4 = symbols('q0 q1 q2 q3 q4 b0 b1 b2 b3 b4 k2 k3 k4')
    # minterms = CNF_n3
    # print(POSform([q0, q1, q2, q3, q4, b0, b1, b2, b3, b4, k2, k3, k4], minterms))
    # print("\n")

    
